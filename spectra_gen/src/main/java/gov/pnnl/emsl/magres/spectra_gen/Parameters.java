/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.pnnl.emsl.magres.spectra_gen;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Parameters extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Parameters\",\"namespace\":\"gov.pnnl.emsl.magres.spectra_gen\",\"fields\":[{\"name\":\"dataPoints\",\"type\":\"int\",\"doc\":\"The number of data points (power of two).\"},{\"name\":\"zeroFills\",\"type\":\"int\",\"doc\":\"The number of zero-fills.\"},{\"name\":\"dwellTime\",\"type\":\"double\",\"doc\":\"The dwell time (seconds).\"},{\"name\":\"nuclei\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Nucleus\",\"doc\":\"A resonant nucleus.\",\"fields\":[{\"name\":\"initialAmplitude\",\"type\":\"double\",\"doc\":\"The initial amplitude of the nucleus (dimensionless).\"},{\"name\":\"signalFrequency\",\"type\":\"double\",\"doc\":\"The resonant frequency of the nucleus (Hertz).\"},{\"name\":\"relaxationTime\",\"type\":\"double\",\"doc\":\"The relaxation time constant of the nucleus (seconds).\"},{\"name\":\"signalPhase\",\"type\":\"double\",\"doc\":\"The phase of the nucleus (radians).\"}]}},\"doc\":\"The list of resonant nuclei.\"},{\"name\":\"scans\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Scan\",\"doc\":\"An individual scan.\",\"fields\":[{\"name\":\"acquisitions\",\"type\":\"int\",\"doc\":\"The number of acquisitions (power of two).\"},{\"name\":\"quadPhaseShiftError\",\"type\":\"double\",\"doc\":\"The error in the quad phase shift of the instrument (radians).\"},{\"name\":\"imaginaryAmplifierGainImbalance\",\"type\":\"double\",\"doc\":\"The gain imbalance (or relative error) in the imaginary channel amplifier of the instrument (%).\"},{\"name\":\"realChannelDC\",\"type\":\"double\",\"doc\":\"The DC in the real channel of the instrument (% of total amplitude).\"},{\"name\":\"imaginaryChannelDC\",\"type\":\"double\",\"doc\":\"The DC in the imaginary channel of the instrument (% of total amplitude).\"},{\"name\":\"noiseLevel\",\"type\":\"double\",\"doc\":\"The level of background noise in the signal (dimensionless).\"},{\"name\":\"lineBroadeningFactor\",\"type\":\"double\",\"doc\":\"The line broadening factor for signal apodization (Hertz).\"}]}},\"doc\":\"The list of scans.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The number of data points (power of two). */
  @Deprecated public int dataPoints;
  /** The number of zero-fills. */
  @Deprecated public int zeroFills;
  /** The dwell time (seconds). */
  @Deprecated public double dwellTime;
  /** The list of resonant nuclei. */
  @Deprecated public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> nuclei;
  /** The list of scans. */
  @Deprecated public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> scans;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Parameters() {}

  /**
   * All-args constructor.
   */
  public Parameters(java.lang.Integer dataPoints, java.lang.Integer zeroFills, java.lang.Double dwellTime, java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> nuclei, java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> scans) {
    this.dataPoints = dataPoints;
    this.zeroFills = zeroFills;
    this.dwellTime = dwellTime;
    this.nuclei = nuclei;
    this.scans = scans;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataPoints;
    case 1: return zeroFills;
    case 2: return dwellTime;
    case 3: return nuclei;
    case 4: return scans;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataPoints = (java.lang.Integer)value$; break;
    case 1: zeroFills = (java.lang.Integer)value$; break;
    case 2: dwellTime = (java.lang.Double)value$; break;
    case 3: nuclei = (java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus>)value$; break;
    case 4: scans = (java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataPoints' field.
   * The number of data points (power of two).   */
  public java.lang.Integer getDataPoints() {
    return dataPoints;
  }

  /**
   * Sets the value of the 'dataPoints' field.
   * The number of data points (power of two).   * @param value the value to set.
   */
  public void setDataPoints(java.lang.Integer value) {
    this.dataPoints = value;
  }

  /**
   * Gets the value of the 'zeroFills' field.
   * The number of zero-fills.   */
  public java.lang.Integer getZeroFills() {
    return zeroFills;
  }

  /**
   * Sets the value of the 'zeroFills' field.
   * The number of zero-fills.   * @param value the value to set.
   */
  public void setZeroFills(java.lang.Integer value) {
    this.zeroFills = value;
  }

  /**
   * Gets the value of the 'dwellTime' field.
   * The dwell time (seconds).   */
  public java.lang.Double getDwellTime() {
    return dwellTime;
  }

  /**
   * Sets the value of the 'dwellTime' field.
   * The dwell time (seconds).   * @param value the value to set.
   */
  public void setDwellTime(java.lang.Double value) {
    this.dwellTime = value;
  }

  /**
   * Gets the value of the 'nuclei' field.
   * The list of resonant nuclei.   */
  public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> getNuclei() {
    return nuclei;
  }

  /**
   * Sets the value of the 'nuclei' field.
   * The list of resonant nuclei.   * @param value the value to set.
   */
  public void setNuclei(java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> value) {
    this.nuclei = value;
  }

  /**
   * Gets the value of the 'scans' field.
   * The list of scans.   */
  public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> getScans() {
    return scans;
  }

  /**
   * Sets the value of the 'scans' field.
   * The list of scans.   * @param value the value to set.
   */
  public void setScans(java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> value) {
    this.scans = value;
  }

  /** Creates a new Parameters RecordBuilder */
  public static gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder newBuilder() {
    return new gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder();
  }
  
  /** Creates a new Parameters RecordBuilder by copying an existing Builder */
  public static gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder newBuilder(gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder other) {
    return new gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder(other);
  }
  
  /** Creates a new Parameters RecordBuilder by copying an existing Parameters instance */
  public static gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder newBuilder(gov.pnnl.emsl.magres.spectra_gen.Parameters other) {
    return new gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder(other);
  }
  
  /**
   * RecordBuilder for Parameters instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Parameters>
    implements org.apache.avro.data.RecordBuilder<Parameters> {

    private int dataPoints;
    private int zeroFills;
    private double dwellTime;
    private java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> nuclei;
    private java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> scans;

    /** Creates a new Builder */
    private Builder() {
      super(gov.pnnl.emsl.magres.spectra_gen.Parameters.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataPoints)) {
        this.dataPoints = data().deepCopy(fields()[0].schema(), other.dataPoints);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.zeroFills)) {
        this.zeroFills = data().deepCopy(fields()[1].schema(), other.zeroFills);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dwellTime)) {
        this.dwellTime = data().deepCopy(fields()[2].schema(), other.dwellTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nuclei)) {
        this.nuclei = data().deepCopy(fields()[3].schema(), other.nuclei);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scans)) {
        this.scans = data().deepCopy(fields()[4].schema(), other.scans);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Parameters instance */
    private Builder(gov.pnnl.emsl.magres.spectra_gen.Parameters other) {
            super(gov.pnnl.emsl.magres.spectra_gen.Parameters.SCHEMA$);
      if (isValidValue(fields()[0], other.dataPoints)) {
        this.dataPoints = data().deepCopy(fields()[0].schema(), other.dataPoints);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.zeroFills)) {
        this.zeroFills = data().deepCopy(fields()[1].schema(), other.zeroFills);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dwellTime)) {
        this.dwellTime = data().deepCopy(fields()[2].schema(), other.dwellTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nuclei)) {
        this.nuclei = data().deepCopy(fields()[3].schema(), other.nuclei);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scans)) {
        this.scans = data().deepCopy(fields()[4].schema(), other.scans);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'dataPoints' field */
    public java.lang.Integer getDataPoints() {
      return dataPoints;
    }
    
    /** Sets the value of the 'dataPoints' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder setDataPoints(int value) {
      validate(fields()[0], value);
      this.dataPoints = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dataPoints' field has been set */
    public boolean hasDataPoints() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dataPoints' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder clearDataPoints() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'zeroFills' field */
    public java.lang.Integer getZeroFills() {
      return zeroFills;
    }
    
    /** Sets the value of the 'zeroFills' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder setZeroFills(int value) {
      validate(fields()[1], value);
      this.zeroFills = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'zeroFills' field has been set */
    public boolean hasZeroFills() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'zeroFills' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder clearZeroFills() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dwellTime' field */
    public java.lang.Double getDwellTime() {
      return dwellTime;
    }
    
    /** Sets the value of the 'dwellTime' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder setDwellTime(double value) {
      validate(fields()[2], value);
      this.dwellTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dwellTime' field has been set */
    public boolean hasDwellTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dwellTime' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder clearDwellTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'nuclei' field */
    public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> getNuclei() {
      return nuclei;
    }
    
    /** Sets the value of the 'nuclei' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder setNuclei(java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus> value) {
      validate(fields()[3], value);
      this.nuclei = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'nuclei' field has been set */
    public boolean hasNuclei() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'nuclei' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder clearNuclei() {
      nuclei = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'scans' field */
    public java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> getScans() {
      return scans;
    }
    
    /** Sets the value of the 'scans' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder setScans(java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan> value) {
      validate(fields()[4], value);
      this.scans = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'scans' field has been set */
    public boolean hasScans() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'scans' field */
    public gov.pnnl.emsl.magres.spectra_gen.Parameters.Builder clearScans() {
      scans = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Parameters build() {
      try {
        Parameters record = new Parameters();
        record.dataPoints = fieldSetFlags()[0] ? this.dataPoints : (java.lang.Integer) defaultValue(fields()[0]);
        record.zeroFills = fieldSetFlags()[1] ? this.zeroFills : (java.lang.Integer) defaultValue(fields()[1]);
        record.dwellTime = fieldSetFlags()[2] ? this.dwellTime : (java.lang.Double) defaultValue(fields()[2]);
        record.nuclei = fieldSetFlags()[3] ? this.nuclei : (java.util.List<gov.pnnl.emsl.magres.spectra_gen.Nucleus>) defaultValue(fields()[3]);
        record.scans = fieldSetFlags()[4] ? this.scans : (java.util.List<gov.pnnl.emsl.magres.spectra_gen.Scan>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
