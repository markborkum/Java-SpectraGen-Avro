/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.pnnl.emsl.magres.spectra_gen;  
@SuppressWarnings("all")
/** An individual scan. */
@org.apache.avro.specific.AvroGenerated
public class Scan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Scan\",\"namespace\":\"gov.pnnl.emsl.magres.spectra_gen\",\"doc\":\"An individual scan.\",\"fields\":[{\"name\":\"acquisitions\",\"type\":\"int\",\"doc\":\"The number of acquisitions (power of two).\"},{\"name\":\"quadPhaseShiftError\",\"type\":\"double\",\"doc\":\"The error in the quad phase shift of the instrument (radians).\"},{\"name\":\"imaginaryAmplifierGainImbalance\",\"type\":\"double\",\"doc\":\"The gain imbalance (or relative error) in the imaginary channel amplifier of the instrument (%).\"},{\"name\":\"realChannelDC\",\"type\":\"double\",\"doc\":\"The DC in the real channel of the instrument (% of total amplitude).\"},{\"name\":\"imaginaryChannelDC\",\"type\":\"double\",\"doc\":\"The DC in the imaginary channel of the instrument (% of total amplitude).\"},{\"name\":\"noiseLevel\",\"type\":\"double\",\"doc\":\"The level of background noise in the signal (dimensionless).\"},{\"name\":\"lineBroadeningFactor\",\"type\":\"double\",\"doc\":\"The line broadening factor for signal apodization (Hertz).\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The number of acquisitions (power of two). */
  @Deprecated public int acquisitions;
  /** The error in the quad phase shift of the instrument (radians). */
  @Deprecated public double quadPhaseShiftError;
  /** The gain imbalance (or relative error) in the imaginary channel amplifier of the instrument (%). */
  @Deprecated public double imaginaryAmplifierGainImbalance;
  /** The DC in the real channel of the instrument (% of total amplitude). */
  @Deprecated public double realChannelDC;
  /** The DC in the imaginary channel of the instrument (% of total amplitude). */
  @Deprecated public double imaginaryChannelDC;
  /** The level of background noise in the signal (dimensionless). */
  @Deprecated public double noiseLevel;
  /** The line broadening factor for signal apodization (Hertz). */
  @Deprecated public double lineBroadeningFactor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Scan() {}

  /**
   * All-args constructor.
   */
  public Scan(java.lang.Integer acquisitions, java.lang.Double quadPhaseShiftError, java.lang.Double imaginaryAmplifierGainImbalance, java.lang.Double realChannelDC, java.lang.Double imaginaryChannelDC, java.lang.Double noiseLevel, java.lang.Double lineBroadeningFactor) {
    this.acquisitions = acquisitions;
    this.quadPhaseShiftError = quadPhaseShiftError;
    this.imaginaryAmplifierGainImbalance = imaginaryAmplifierGainImbalance;
    this.realChannelDC = realChannelDC;
    this.imaginaryChannelDC = imaginaryChannelDC;
    this.noiseLevel = noiseLevel;
    this.lineBroadeningFactor = lineBroadeningFactor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return acquisitions;
    case 1: return quadPhaseShiftError;
    case 2: return imaginaryAmplifierGainImbalance;
    case 3: return realChannelDC;
    case 4: return imaginaryChannelDC;
    case 5: return noiseLevel;
    case 6: return lineBroadeningFactor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: acquisitions = (java.lang.Integer)value$; break;
    case 1: quadPhaseShiftError = (java.lang.Double)value$; break;
    case 2: imaginaryAmplifierGainImbalance = (java.lang.Double)value$; break;
    case 3: realChannelDC = (java.lang.Double)value$; break;
    case 4: imaginaryChannelDC = (java.lang.Double)value$; break;
    case 5: noiseLevel = (java.lang.Double)value$; break;
    case 6: lineBroadeningFactor = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'acquisitions' field.
   * The number of acquisitions (power of two).   */
  public java.lang.Integer getAcquisitions() {
    return acquisitions;
  }

  /**
   * Sets the value of the 'acquisitions' field.
   * The number of acquisitions (power of two).   * @param value the value to set.
   */
  public void setAcquisitions(java.lang.Integer value) {
    this.acquisitions = value;
  }

  /**
   * Gets the value of the 'quadPhaseShiftError' field.
   * The error in the quad phase shift of the instrument (radians).   */
  public java.lang.Double getQuadPhaseShiftError() {
    return quadPhaseShiftError;
  }

  /**
   * Sets the value of the 'quadPhaseShiftError' field.
   * The error in the quad phase shift of the instrument (radians).   * @param value the value to set.
   */
  public void setQuadPhaseShiftError(java.lang.Double value) {
    this.quadPhaseShiftError = value;
  }

  /**
   * Gets the value of the 'imaginaryAmplifierGainImbalance' field.
   * The gain imbalance (or relative error) in the imaginary channel amplifier of the instrument (%).   */
  public java.lang.Double getImaginaryAmplifierGainImbalance() {
    return imaginaryAmplifierGainImbalance;
  }

  /**
   * Sets the value of the 'imaginaryAmplifierGainImbalance' field.
   * The gain imbalance (or relative error) in the imaginary channel amplifier of the instrument (%).   * @param value the value to set.
   */
  public void setImaginaryAmplifierGainImbalance(java.lang.Double value) {
    this.imaginaryAmplifierGainImbalance = value;
  }

  /**
   * Gets the value of the 'realChannelDC' field.
   * The DC in the real channel of the instrument (% of total amplitude).   */
  public java.lang.Double getRealChannelDC() {
    return realChannelDC;
  }

  /**
   * Sets the value of the 'realChannelDC' field.
   * The DC in the real channel of the instrument (% of total amplitude).   * @param value the value to set.
   */
  public void setRealChannelDC(java.lang.Double value) {
    this.realChannelDC = value;
  }

  /**
   * Gets the value of the 'imaginaryChannelDC' field.
   * The DC in the imaginary channel of the instrument (% of total amplitude).   */
  public java.lang.Double getImaginaryChannelDC() {
    return imaginaryChannelDC;
  }

  /**
   * Sets the value of the 'imaginaryChannelDC' field.
   * The DC in the imaginary channel of the instrument (% of total amplitude).   * @param value the value to set.
   */
  public void setImaginaryChannelDC(java.lang.Double value) {
    this.imaginaryChannelDC = value;
  }

  /**
   * Gets the value of the 'noiseLevel' field.
   * The level of background noise in the signal (dimensionless).   */
  public java.lang.Double getNoiseLevel() {
    return noiseLevel;
  }

  /**
   * Sets the value of the 'noiseLevel' field.
   * The level of background noise in the signal (dimensionless).   * @param value the value to set.
   */
  public void setNoiseLevel(java.lang.Double value) {
    this.noiseLevel = value;
  }

  /**
   * Gets the value of the 'lineBroadeningFactor' field.
   * The line broadening factor for signal apodization (Hertz).   */
  public java.lang.Double getLineBroadeningFactor() {
    return lineBroadeningFactor;
  }

  /**
   * Sets the value of the 'lineBroadeningFactor' field.
   * The line broadening factor for signal apodization (Hertz).   * @param value the value to set.
   */
  public void setLineBroadeningFactor(java.lang.Double value) {
    this.lineBroadeningFactor = value;
  }

  /** Creates a new Scan RecordBuilder */
  public static gov.pnnl.emsl.magres.spectra_gen.Scan.Builder newBuilder() {
    return new gov.pnnl.emsl.magres.spectra_gen.Scan.Builder();
  }
  
  /** Creates a new Scan RecordBuilder by copying an existing Builder */
  public static gov.pnnl.emsl.magres.spectra_gen.Scan.Builder newBuilder(gov.pnnl.emsl.magres.spectra_gen.Scan.Builder other) {
    return new gov.pnnl.emsl.magres.spectra_gen.Scan.Builder(other);
  }
  
  /** Creates a new Scan RecordBuilder by copying an existing Scan instance */
  public static gov.pnnl.emsl.magres.spectra_gen.Scan.Builder newBuilder(gov.pnnl.emsl.magres.spectra_gen.Scan other) {
    return new gov.pnnl.emsl.magres.spectra_gen.Scan.Builder(other);
  }
  
  /**
   * RecordBuilder for Scan instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Scan>
    implements org.apache.avro.data.RecordBuilder<Scan> {

    private int acquisitions;
    private double quadPhaseShiftError;
    private double imaginaryAmplifierGainImbalance;
    private double realChannelDC;
    private double imaginaryChannelDC;
    private double noiseLevel;
    private double lineBroadeningFactor;

    /** Creates a new Builder */
    private Builder() {
      super(gov.pnnl.emsl.magres.spectra_gen.Scan.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.pnnl.emsl.magres.spectra_gen.Scan.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acquisitions)) {
        this.acquisitions = data().deepCopy(fields()[0].schema(), other.acquisitions);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quadPhaseShiftError)) {
        this.quadPhaseShiftError = data().deepCopy(fields()[1].schema(), other.quadPhaseShiftError);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imaginaryAmplifierGainImbalance)) {
        this.imaginaryAmplifierGainImbalance = data().deepCopy(fields()[2].schema(), other.imaginaryAmplifierGainImbalance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.realChannelDC)) {
        this.realChannelDC = data().deepCopy(fields()[3].schema(), other.realChannelDC);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.imaginaryChannelDC)) {
        this.imaginaryChannelDC = data().deepCopy(fields()[4].schema(), other.imaginaryChannelDC);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.noiseLevel)) {
        this.noiseLevel = data().deepCopy(fields()[5].schema(), other.noiseLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lineBroadeningFactor)) {
        this.lineBroadeningFactor = data().deepCopy(fields()[6].schema(), other.lineBroadeningFactor);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Scan instance */
    private Builder(gov.pnnl.emsl.magres.spectra_gen.Scan other) {
            super(gov.pnnl.emsl.magres.spectra_gen.Scan.SCHEMA$);
      if (isValidValue(fields()[0], other.acquisitions)) {
        this.acquisitions = data().deepCopy(fields()[0].schema(), other.acquisitions);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quadPhaseShiftError)) {
        this.quadPhaseShiftError = data().deepCopy(fields()[1].schema(), other.quadPhaseShiftError);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.imaginaryAmplifierGainImbalance)) {
        this.imaginaryAmplifierGainImbalance = data().deepCopy(fields()[2].schema(), other.imaginaryAmplifierGainImbalance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.realChannelDC)) {
        this.realChannelDC = data().deepCopy(fields()[3].schema(), other.realChannelDC);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.imaginaryChannelDC)) {
        this.imaginaryChannelDC = data().deepCopy(fields()[4].schema(), other.imaginaryChannelDC);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.noiseLevel)) {
        this.noiseLevel = data().deepCopy(fields()[5].schema(), other.noiseLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lineBroadeningFactor)) {
        this.lineBroadeningFactor = data().deepCopy(fields()[6].schema(), other.lineBroadeningFactor);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'acquisitions' field */
    public java.lang.Integer getAcquisitions() {
      return acquisitions;
    }
    
    /** Sets the value of the 'acquisitions' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setAcquisitions(int value) {
      validate(fields()[0], value);
      this.acquisitions = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'acquisitions' field has been set */
    public boolean hasAcquisitions() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'acquisitions' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearAcquisitions() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'quadPhaseShiftError' field */
    public java.lang.Double getQuadPhaseShiftError() {
      return quadPhaseShiftError;
    }
    
    /** Sets the value of the 'quadPhaseShiftError' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setQuadPhaseShiftError(double value) {
      validate(fields()[1], value);
      this.quadPhaseShiftError = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'quadPhaseShiftError' field has been set */
    public boolean hasQuadPhaseShiftError() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'quadPhaseShiftError' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearQuadPhaseShiftError() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'imaginaryAmplifierGainImbalance' field */
    public java.lang.Double getImaginaryAmplifierGainImbalance() {
      return imaginaryAmplifierGainImbalance;
    }
    
    /** Sets the value of the 'imaginaryAmplifierGainImbalance' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setImaginaryAmplifierGainImbalance(double value) {
      validate(fields()[2], value);
      this.imaginaryAmplifierGainImbalance = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'imaginaryAmplifierGainImbalance' field has been set */
    public boolean hasImaginaryAmplifierGainImbalance() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'imaginaryAmplifierGainImbalance' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearImaginaryAmplifierGainImbalance() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'realChannelDC' field */
    public java.lang.Double getRealChannelDC() {
      return realChannelDC;
    }
    
    /** Sets the value of the 'realChannelDC' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setRealChannelDC(double value) {
      validate(fields()[3], value);
      this.realChannelDC = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'realChannelDC' field has been set */
    public boolean hasRealChannelDC() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'realChannelDC' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearRealChannelDC() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'imaginaryChannelDC' field */
    public java.lang.Double getImaginaryChannelDC() {
      return imaginaryChannelDC;
    }
    
    /** Sets the value of the 'imaginaryChannelDC' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setImaginaryChannelDC(double value) {
      validate(fields()[4], value);
      this.imaginaryChannelDC = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'imaginaryChannelDC' field has been set */
    public boolean hasImaginaryChannelDC() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'imaginaryChannelDC' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearImaginaryChannelDC() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'noiseLevel' field */
    public java.lang.Double getNoiseLevel() {
      return noiseLevel;
    }
    
    /** Sets the value of the 'noiseLevel' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setNoiseLevel(double value) {
      validate(fields()[5], value);
      this.noiseLevel = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'noiseLevel' field has been set */
    public boolean hasNoiseLevel() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'noiseLevel' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearNoiseLevel() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'lineBroadeningFactor' field */
    public java.lang.Double getLineBroadeningFactor() {
      return lineBroadeningFactor;
    }
    
    /** Sets the value of the 'lineBroadeningFactor' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder setLineBroadeningFactor(double value) {
      validate(fields()[6], value);
      this.lineBroadeningFactor = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'lineBroadeningFactor' field has been set */
    public boolean hasLineBroadeningFactor() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'lineBroadeningFactor' field */
    public gov.pnnl.emsl.magres.spectra_gen.Scan.Builder clearLineBroadeningFactor() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Scan build() {
      try {
        Scan record = new Scan();
        record.acquisitions = fieldSetFlags()[0] ? this.acquisitions : (java.lang.Integer) defaultValue(fields()[0]);
        record.quadPhaseShiftError = fieldSetFlags()[1] ? this.quadPhaseShiftError : (java.lang.Double) defaultValue(fields()[1]);
        record.imaginaryAmplifierGainImbalance = fieldSetFlags()[2] ? this.imaginaryAmplifierGainImbalance : (java.lang.Double) defaultValue(fields()[2]);
        record.realChannelDC = fieldSetFlags()[3] ? this.realChannelDC : (java.lang.Double) defaultValue(fields()[3]);
        record.imaginaryChannelDC = fieldSetFlags()[4] ? this.imaginaryChannelDC : (java.lang.Double) defaultValue(fields()[4]);
        record.noiseLevel = fieldSetFlags()[5] ? this.noiseLevel : (java.lang.Double) defaultValue(fields()[5]);
        record.lineBroadeningFactor = fieldSetFlags()[6] ? this.lineBroadeningFactor : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
